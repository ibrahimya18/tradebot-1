{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getBalance, getPriceHistory, placeOrder as apiPlaceOrder } from '../services/api';\nexport const useBinance = () => {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [currentPrice, setCurrentPrice] = useState(0);\n  const [priceHistory, setPriceHistory] = useState([]);\n  const [openOrders, setOpenOrders] = useState([]);\n  const [orderHistory, setOrderHistory] = useState([]);\n  const [leverage, setLeverageState] = useState(10);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const connectWallet = async (apiKey, secretKey) => {\n    try {\n      // Önce cüzdan bağlantısını kontrol edelim\n      const bal = await getBalance(apiKey, secretKey);\n      setBalance(bal);\n      setConnectionStatus('connecting');\n\n      // WebSocket bağlantısını oluşturalım\n      const ws = new WebSocket('wss://stream.binance.com:9443/ws/dogeusdt@ticker');\n      ws.onopen = () => {\n        setConnectionStatus('connected');\n        console.log('WebSocket connected');\n      };\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        const newPrice = parseFloat(data.c);\n        setCurrentPrice(newPrice);\n        setPriceHistory(prev => [...prev.slice(-99), newPrice]);\n      };\n      ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('error');\n      };\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setConnectionStatus('disconnected');\n      };\n\n      // Fiyat geçmişini yükle\n      const history = await getPriceHistory();\n      setPriceHistory(history.map(item => parseFloat(item)));\n      return true;\n    } catch (error) {\n      console.error('Connection failed:', error);\n      setConnectionStatus('error');\n      return false;\n    }\n  };\n  const placeOrder = async (side, amount, price) => {\n    try {\n      const order = {\n        symbol: 'DOGEUSDT',\n        side,\n        amount,\n        price,\n        leverage,\n        timestamp: Date.now(),\n        status: 'open'\n      };\n\n      // API'ye gönder\n      await apiPlaceOrder(order);\n      setOpenOrders(prev => [...prev, order]);\n      return order;\n    } catch (error) {\n      console.error('Order failed:', error);\n      return null;\n    }\n  };\n  const applyAlgorithm = algorithmName => {\n    const priceData = [...priceHistory, currentPrice];\n    switch (algorithmName) {\n      case 'meanReversion':\n        return meanReversion(priceData);\n      case 'breakout':\n        return breakout(priceData);\n      default:\n        return {\n          action: 'hold',\n          price: currentPrice\n        };\n    }\n  };\n  useEffect(() => {\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [ws]);\n  return {\n    balance,\n    currentPrice,\n    priceHistory,\n    openOrders,\n    orderHistory,\n    connectWallet,\n    placeOrder,\n    setLeverage,\n    applyAlgorithm\n  };\n};\n_s(useBinance, \"uDz0qE3wCgvaGx2y7e4dwsD+1Hg=\");","map":{"version":3,"names":["useState","useEffect","getBalance","getPriceHistory","placeOrder","apiPlaceOrder","useBinance","_s","balance","setBalance","currentPrice","setCurrentPrice","priceHistory","setPriceHistory","openOrders","setOpenOrders","orderHistory","setOrderHistory","leverage","setLeverageState","connectionStatus","setConnectionStatus","connectWallet","apiKey","secretKey","bal","ws","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","newPrice","parseFloat","c","prev","slice","onerror","error","onclose","history","map","item","side","amount","price","order","symbol","timestamp","Date","now","status","applyAlgorithm","algorithmName","priceData","meanReversion","breakout","action","close","setLeverage"],"sources":["C:/Users/VESTEL/Documents/GitHub/tradebot/src/hooks/useBinance.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getBalance, getPriceHistory, placeOrder as apiPlaceOrder } from '../services/api';\r\n\r\nexport const useBinance = () => {\r\n  const [balance, setBalance] = useState(null);\r\n  const [currentPrice, setCurrentPrice] = useState(0);\r\n  const [priceHistory, setPriceHistory] = useState([]);\r\n  const [openOrders, setOpenOrders] = useState([]);\r\n  const [orderHistory, setOrderHistory] = useState([]);\r\n  const [leverage, setLeverageState] = useState(10);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n\r\n  const connectWallet = async (apiKey, secretKey) => {\r\n    try {\r\n      // Önce cüzdan bağlantısını kontrol edelim\r\n      const bal = await getBalance(apiKey, secretKey);\r\n      setBalance(bal);\r\n      setConnectionStatus('connecting');\r\n\r\n      // WebSocket bağlantısını oluşturalım\r\n      const ws = new WebSocket('wss://stream.binance.com:9443/ws/dogeusdt@ticker');\r\n\r\n      ws.onopen = () => {\r\n        setConnectionStatus('connected');\r\n        console.log('WebSocket connected');\r\n      };\r\n\r\n      ws.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        const newPrice = parseFloat(data.c);\r\n        setCurrentPrice(newPrice);\r\n        setPriceHistory(prev => [...prev.slice(-99), newPrice]);\r\n      };\r\n\r\n      ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        setConnectionStatus('error');\r\n      };\r\n\r\n      ws.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n        setConnectionStatus('disconnected');\r\n      };\r\n\r\n      // Fiyat geçmişini yükle\r\n      const history = await getPriceHistory();\r\n      setPriceHistory(history.map(item => parseFloat(item)));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Connection failed:', error);\r\n      setConnectionStatus('error');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const placeOrder = async (side, amount, price) => {\r\n    try {\r\n      const order = {\r\n        symbol: 'DOGEUSDT',\r\n        side,\r\n        amount,\r\n        price,\r\n        leverage,\r\n        timestamp: Date.now(),\r\n        status: 'open'\r\n      };\r\n      \r\n      // API'ye gönder\r\n      await apiPlaceOrder(order);\r\n      \r\n      setOpenOrders(prev => [...prev, order]);\r\n      return order;\r\n    } catch (error) {\r\n      console.error('Order failed:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const applyAlgorithm = (algorithmName) => {\r\n    const priceData = [...priceHistory, currentPrice];\r\n    \r\n    switch(algorithmName) {\r\n      case 'meanReversion':\r\n        return meanReversion(priceData);\r\n      case 'breakout':\r\n        return breakout(priceData);\r\n      default:\r\n        return { action: 'hold', price: currentPrice };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (ws) {\r\n        ws.close();\r\n      }\r\n    };\r\n  }, [ws]);\r\n\r\n  return {\r\n    balance,\r\n    currentPrice,\r\n    priceHistory,\r\n    openOrders,\r\n    orderHistory,\r\n    connectWallet,\r\n    placeOrder,\r\n    setLeverage,\r\n    applyAlgorithm\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,eAAe,EAAEC,UAAU,IAAIC,aAAa,QAAQ,iBAAiB;AAE1F,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkB,QAAQ,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,cAAc,CAAC;EAExE,MAAMsB,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,SAAS,KAAK;IACjD,IAAI;MACF;MACA,MAAMC,GAAG,GAAG,MAAMvB,UAAU,CAACqB,MAAM,EAAEC,SAAS,CAAC;MAC/Cf,UAAU,CAACgB,GAAG,CAAC;MACfJ,mBAAmB,CAAC,YAAY,CAAC;;MAEjC;MACA,MAAMK,EAAE,GAAG,IAAIC,SAAS,CAAC,kDAAkD,CAAC;MAE5ED,EAAE,CAACE,MAAM,GAAG,MAAM;QAChBP,mBAAmB,CAAC,WAAW,CAAC;QAChCQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC,CAAC;MAEDJ,EAAE,CAACK,SAAS,GAAIC,KAAK,IAAK;QACxB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;QACnC,MAAMG,QAAQ,GAAGC,UAAU,CAACJ,IAAI,CAACK,CAAC,CAAC;QACnC3B,eAAe,CAACyB,QAAQ,CAAC;QACzBvB,eAAe,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAEJ,QAAQ,CAAC,CAAC;MACzD,CAAC;MAEDV,EAAE,CAACe,OAAO,GAAIC,KAAK,IAAK;QACtBb,OAAO,CAACa,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCrB,mBAAmB,CAAC,OAAO,CAAC;MAC9B,CAAC;MAEDK,EAAE,CAACiB,OAAO,GAAG,MAAM;QACjBd,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCT,mBAAmB,CAAC,cAAc,CAAC;MACrC,CAAC;;MAED;MACA,MAAMuB,OAAO,GAAG,MAAMzC,eAAe,CAAC,CAAC;MACvCU,eAAe,CAAC+B,OAAO,CAACC,GAAG,CAACC,IAAI,IAAIT,UAAU,CAACS,IAAI,CAAC,CAAC,CAAC;MAEtD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CrB,mBAAmB,CAAC,OAAO,CAAC;MAC5B,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMjB,UAAU,GAAG,MAAAA,CAAO2C,IAAI,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAChD,IAAI;MACF,MAAMC,KAAK,GAAG;QACZC,MAAM,EAAE,UAAU;QAClBJ,IAAI;QACJC,MAAM;QACNC,KAAK;QACL/B,QAAQ;QACRkC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrBC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,MAAMlD,aAAa,CAAC6C,KAAK,CAAC;MAE1BnC,aAAa,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEW,KAAK,CAAC,CAAC;MACvC,OAAOA,KAAK;IACd,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMc,cAAc,GAAIC,aAAa,IAAK;IACxC,MAAMC,SAAS,GAAG,CAAC,GAAG9C,YAAY,EAAEF,YAAY,CAAC;IAEjD,QAAO+C,aAAa;MAClB,KAAK,eAAe;QAClB,OAAOE,aAAa,CAACD,SAAS,CAAC;MACjC,KAAK,UAAU;QACb,OAAOE,QAAQ,CAACF,SAAS,CAAC;MAC5B;QACE,OAAO;UAAEG,MAAM,EAAE,MAAM;UAAEZ,KAAK,EAAEvC;QAAa,CAAC;IAClD;EACF,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIyB,EAAE,EAAE;QACNA,EAAE,CAACoC,KAAK,CAAC,CAAC;MACZ;IACF,CAAC;EACH,CAAC,EAAE,CAACpC,EAAE,CAAC,CAAC;EAER,OAAO;IACLlB,OAAO;IACPE,YAAY;IACZE,YAAY;IACZE,UAAU;IACVE,YAAY;IACZM,aAAa;IACblB,UAAU;IACV2D,WAAW;IACXP;EACF,CAAC;AACH,CAAC;AAACjD,EAAA,CA5GWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}