{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nexport default function useMexcCandles(symbol = 'DOGE_USDT', interval = 'Min1') {\n  _s();\n  const [candles, setCandles] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n  const ws = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  const connect = () => {\n    setError(null);\n    ws.current = new WebSocket('wss://contract.mexc.com/ws');\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n      const payload = {\n        method: \"SUBSCRIBE\",\n        params: [`spot@public.kline.v3.api.${symbol}@${interval}`]\n      };\n      ws.current.send(JSON.stringify(payload));\n    };\n    ws.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      if (message.data && message.data.k) {\n        const k = message.data.k;\n        const candle = {\n          x: new Date(k.t),\n          o: parseFloat(k.o),\n          h: parseFloat(k.h),\n          l: parseFloat(k.l),\n          c: parseFloat(k.c)\n        };\n        setCandles(prevCandles => {\n          const last = prevCandles[prevCandles.length - 1];\n          if (last && last.x.getTime() === candle.x.getTime()) {\n            return [...prevCandles.slice(0, -1), candle];\n          }\n          // Limit the number of candles to prevent memory issues\n          return [...prevCandles.slice(-500), candle];\n        });\n      }\n    };\n    ws.current.onerror = err => {\n      console.error(\"WebSocket error:\", err);\n      setError(err);\n      setIsConnected(false);\n    };\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log(\"WebSocket connection closed\");\n      // Attempt to reconnect\n      if (reconnectAttempts.current < maxReconnectAttempts) {\n        const delay = Math.min(1000 * 2 ** reconnectAttempts.current, 30000);\n        reconnectAttempts.current += 1;\n        setTimeout(connect, delay);\n      }\n    };\n  };\n  useEffect(() => {\n    connect();\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [symbol, interval]);\n  return {\n    candles,\n    isConnected,\n    error\n  };\n}\n_s(useMexcCandles, \"ZwAPJ2ZK53ZCR2/yjq4fHfK9fOg=\");","map":{"version":3,"names":["useEffect","useRef","useState","useMexcCandles","symbol","interval","_s","candles","setCandles","isConnected","setIsConnected","error","setError","ws","reconnectAttempts","maxReconnectAttempts","connect","current","WebSocket","onopen","payload","method","params","send","JSON","stringify","onmessage","event","message","parse","data","k","candle","x","Date","t","o","parseFloat","h","l","c","prevCandles","last","length","getTime","slice","onerror","err","console","onclose","log","delay","Math","min","setTimeout","close"],"sources":["C:/Users/VESTEL/Desktop/tradebot/src/hooks/useWebSocket.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nexport default function useMexcCandles(symbol = 'DOGE_USDT', interval = 'Min1') {\r\n  const [candles, setCandles] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const ws = useRef(null);\r\n  const reconnectAttempts = useRef(0);\r\n  const maxReconnectAttempts = 5;\r\n\r\n  const connect = () => {\r\n    setError(null);\r\n    ws.current = new WebSocket('wss://contract.mexc.com/ws');\r\n\r\n    ws.current.onopen = () => {\r\n      setIsConnected(true);\r\n      reconnectAttempts.current = 0;\r\n      const payload = {\r\n        method: \"SUBSCRIBE\",\r\n        params: [`spot@public.kline.v3.api.${symbol}@${interval}`]\r\n      };\r\n      ws.current.send(JSON.stringify(payload));\r\n    };\r\n\r\n    ws.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n\r\n      if (message.data && message.data.k) {\r\n        const k = message.data.k;\r\n\r\n         const candle = {\r\n          x: new Date(k.t),\r\n          o: parseFloat(k.o),\r\n          h: parseFloat(k.h),\r\n          l: parseFloat(k.l),\r\n          c: parseFloat(k.c),\r\n        };\r\n\r\n        setCandles((prevCandles) => {\r\n          const last = prevCandles[prevCandles.length - 1];\r\n          if (last && last.x.getTime() === candle.x.getTime()) {\r\n            return [...prevCandles.slice(0, -1), candle];\r\n          }\r\n          // Limit the number of candles to prevent memory issues\r\n          return [...prevCandles.slice(-500), candle];\r\n        });\r\n      }\r\n    };\r\n\r\n    ws.current.onerror = (err) => {\r\n      console.error(\"WebSocket error:\", err);\r\n      setError(err);\r\n      setIsConnected(false);\r\n    };\r\n\r\n    ws.current.onclose = () => {\r\n      setIsConnected(false);\r\n      console.log(\"WebSocket connection closed\");\r\n      // Attempt to reconnect\r\n      if (reconnectAttempts.current < maxReconnectAttempts) {\r\n        const delay = Math.min(1000 * 2 ** reconnectAttempts.current, 30000);\r\n        reconnectAttempts.current += 1;\r\n        setTimeout(connect, delay);\r\n      }\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      if (ws.current) {\r\n        ws.current.close();\r\n      }\r\n    };\r\n  }, [symbol, interval]);\r\n\r\n  return { candles, isConnected, error };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}