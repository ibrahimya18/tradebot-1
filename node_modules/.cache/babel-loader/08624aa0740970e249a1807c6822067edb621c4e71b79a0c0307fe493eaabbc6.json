{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getBalance, getDogeUsdtPrice, getPriceHistory, placeOrder as apiPlaceOrder } from \"../services/api\";\nimport { meanReversion, breakout, defaultAlgorithmSettings } from '../services/tradingAlgorithms';\nexport const useMexc = () => {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [currentPrice, setCurrentPrice] = useState(0);\n  const [priceHistory, setPriceHistory] = useState([]);\n  const [openOrders, setOpenOrders] = useState([]);\n  const [orderHistory, setOrderHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [leverage, setLeverage] = useState(10);\n  const [ws, setWs] = useState(null);\n  const [algorithmSettings, setAlgorithmSettings] = useState({\n    ...defaultAlgorithmSettings,\n    selectedAlgorithm: 'meanReversion'\n  });\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const connectWallet = async (apiKey, secretKey) => {\n    if (!apiKey || !secretKey) {\n      setConnectionStatus('disconnected');\n      return false;\n    }\n    try {\n      setConnectionStatus('connecting');\n      //const bal = await getBalance(apiKey, secretKey);\n      //setBalance(bal);\n\n      // WebSocket bağlantısı\n      //const websocket = new WebSocket('wss://wbs.mexc.com/ws');\n\n      // websocket.onopen = () => {\n      //   websocket.send(JSON.stringify({\n      //     method: \"SUBSCRIPTION\",\n      //     params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"]\n      //   }));\n      //   setConnectionStatus('connected');\n      // }; \n\n      // websocket.onmessage = (event) => {\n      //   const data = JSON.parse(event.data);\n      //   if (data && data.d && data.d.c) {\n      //    setCurrentPrice(parseFloat(data.d.c));\n      //     setPriceHistory((prev) => [...prev.slice(-99), parseFloat(data.d.c)]);\n      //   }\n      // };\n\n      // setWs(websocket);\n\n      // Fiyat geçmişini yükle\n      //const history = await getPriceHistory();\n      //setPriceHistory(history);\n\n      return true;\n    } catch (error) {\n      setConnectionStatus('error');\n      return false;\n    }\n  };\n  const placeOrder = async (side, amount, price) => {\n    try {\n      const order = {\n        symbol: \"DOGEUSDT\",\n        side,\n        amount,\n        price,\n        leverage,\n        timestamp: Date.now(),\n        status: \"open\"\n      };\n\n      // API'ye gönder\n      await apiPlaceOrder(order);\n      setOpenOrders(prev => [...prev, order]);\n      return order;\n    } catch (error) {\n      console.error(\"Order failed:\", error);\n      return null;\n    }\n  };\n  const applyAlgorithm = () => {\n    const priceData = response.data.map(kline => ({\n      x: kline[0],\n      // timestamp\n      o: parseFloat(kline[1]),\n      // open\n      h: parseFloat(kline[2]),\n      // high\n      l: parseFloat(kline[3]),\n      // low\n      c: parseFloat(kline[4]) // close\n    }));\n    const settings = algorithmSettings[algorithmSettings.selectedAlgorithm];\n    switch (algorithmSettings.selectedAlgorithm) {\n      case 'meanReversion':\n        return meanReversion(priceData, settings);\n      case 'breakout':\n        return breakout(priceData, settings);\n      default:\n        return {\n          action: 'hold',\n          price: currentPrice\n        };\n    }\n  };\n  const updateAlgorithmSettings = (algorithm, newSettings) => {\n    setAlgorithmSettings(prev => ({\n      ...prev,\n      [algorithm]: {\n        ...prev[algorithm],\n        ...newSettings\n      }\n    }));\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const [price, history] = await Promise.all([getDogeUsdtPrice(), getPriceHistory()]);\n        setCurrentPrice(price);\n        setPriceHistory(history);\n      } catch (error) {\n        console.error('Initial data fetch failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  //useEffect(() => {\n  //   const ws = new WebSocket('wss://wbs.mexc.com/ws');\n\n  //   ws.onopen = () => {\n  //     ws.send(JSON.stringify({\n  //       method: \"SUBSCRIPTION\",\n  //       params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"]\n  //     }));\n  //   };\n\n  //   ws.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  //     if (data?.d?.c) {\n  //       const newPrice = parseFloat(data.d.c);\n  //       setCurrentPrice(newPrice);\n  //       setPriceHistory(prev => [...prev.slice(-99), newPrice]);\n  //     }\n  //   };\n\n  //   return () => ws.close();\n  // }, []);\n\n  return {\n    balance,\n    currentPrice,\n    priceHistory,\n    loading,\n    openOrders,\n    orderHistory,\n    connectWallet,\n    placeOrder,\n    setLeverage,\n    applyAlgorithm,\n    algorithmSettings,\n    updateAlgorithmSettings,\n    connectionStatus,\n    setSelectedAlgorithm: algo => setAlgorithmSettings(prev => ({\n      ...prev,\n      selectedAlgorithm: algo\n    }))\n  };\n};\n_s(useMexc, \"ek+ODt3nbEEUhZiWXA2rKsE0jmI=\");","map":{"version":3,"names":["useState","useEffect","getBalance","getDogeUsdtPrice","getPriceHistory","placeOrder","apiPlaceOrder","meanReversion","breakout","defaultAlgorithmSettings","useMexc","_s","balance","setBalance","currentPrice","setCurrentPrice","priceHistory","setPriceHistory","openOrders","setOpenOrders","orderHistory","setOrderHistory","loading","setLoading","leverage","setLeverage","ws","setWs","algorithmSettings","setAlgorithmSettings","selectedAlgorithm","connectionStatus","setConnectionStatus","connectWallet","apiKey","secretKey","error","side","amount","price","order","symbol","timestamp","Date","now","status","prev","console","applyAlgorithm","priceData","response","data","map","kline","x","o","parseFloat","h","l","c","settings","action","updateAlgorithmSettings","algorithm","newSettings","fetchInitialData","history","Promise","all","setSelectedAlgorithm","algo"],"sources":["C:/Users/VESTEL/Documents/GitHub/tradebot/src/hooks/useMexc.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {\r\n  getBalance,getDogeUsdtPrice,\r\n  getPriceHistory,\r\n  placeOrder as apiPlaceOrder,\r\n} from \"../services/api\";\r\nimport { meanReversion, breakout,defaultAlgorithmSettings  } from '../services/tradingAlgorithms'; \r\n\r\nexport const useMexc = () => { \r\n  const [balance, setBalance] = useState(null);\r\n  const [currentPrice, setCurrentPrice] = useState(0);\r\n  const [priceHistory, setPriceHistory] = useState([]);\r\n  const [openOrders, setOpenOrders] = useState([]);\r\n  const [orderHistory, setOrderHistory] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [leverage, setLeverage] = useState(10);\r\n  const [ws, setWs] = useState(null);\r\n  const [algorithmSettings, setAlgorithmSettings] = useState({\r\n    ...defaultAlgorithmSettings,\r\n    selectedAlgorithm: 'meanReversion'\r\n  });\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n \r\n  const connectWallet = async (apiKey, secretKey) => {\r\n    if (!apiKey || !secretKey) {\r\n      setConnectionStatus('disconnected');\r\n      return false;\r\n    }\r\n    try {\r\n      setConnectionStatus('connecting');\r\n      //const bal = await getBalance(apiKey, secretKey);\r\n      //setBalance(bal);\r\n      \r\n      // WebSocket bağlantısı\r\n      //const websocket = new WebSocket('wss://wbs.mexc.com/ws');\r\n      \r\n      // websocket.onopen = () => {\r\n      //   websocket.send(JSON.stringify({\r\n      //     method: \"SUBSCRIPTION\",\r\n      //     params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"]\r\n      //   }));\r\n      //   setConnectionStatus('connected');\r\n      // }; \r\n\r\n      // websocket.onmessage = (event) => {\r\n      //   const data = JSON.parse(event.data);\r\n      //   if (data && data.d && data.d.c) {\r\n       //    setCurrentPrice(parseFloat(data.d.c));\r\n      //     setPriceHistory((prev) => [...prev.slice(-99), parseFloat(data.d.c)]);\r\n      //   }\r\n      // };\r\n\r\n      // setWs(websocket);\r\n\r\n      // Fiyat geçmişini yükle\r\n      //const history = await getPriceHistory();\r\n      //setPriceHistory(history);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      setConnectionStatus('error');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const placeOrder = async (side, amount, price) => {\r\n    try {\r\n      const order = {\r\n        symbol: \"DOGEUSDT\",\r\n        side,\r\n        amount,\r\n        price,\r\n        leverage,\r\n        timestamp: Date.now(),\r\n        status: \"open\",\r\n      };\r\n\r\n      // API'ye gönder\r\n      await apiPlaceOrder(order);\r\n\r\n      setOpenOrders((prev) => [...prev, order]);\r\n      return order;\r\n    } catch (error) {\r\n      console.error(\"Order failed:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const applyAlgorithm = () => {\r\n    const priceData = response.data.map(kline => ({\r\n      x: kline[0],             // timestamp\r\n      o: parseFloat(kline[1]), // open\r\n      h: parseFloat(kline[2]), // high\r\n      l: parseFloat(kline[3]), // low\r\n      c: parseFloat(kline[4])  // close\r\n    }));\r\n    const settings = algorithmSettings[algorithmSettings.selectedAlgorithm];\r\n    \r\n    switch(algorithmSettings.selectedAlgorithm) {\r\n      case 'meanReversion':\r\n        return meanReversion(priceData, settings);\r\n      case 'breakout':\r\n        return breakout(priceData, settings);\r\n      default:\r\n        return { action: 'hold', price: currentPrice };\r\n    }\r\n  };\r\n  const updateAlgorithmSettings = (algorithm, newSettings) => {\r\n    setAlgorithmSettings(prev => ({\r\n      ...prev,\r\n      [algorithm]: {\r\n        ...prev[algorithm],\r\n        ...newSettings\r\n      }\r\n    }));\r\n  };\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        const [price, history] = await Promise.all([\r\n          getDogeUsdtPrice(),\r\n          getPriceHistory()\r\n        ]);\r\n        setCurrentPrice(price);\r\n        setPriceHistory(history);\r\n      } catch (error) {\r\n        console.error('Initial data fetch failed:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n     \r\n    fetchInitialData();\r\n  }, []);\r\n  //useEffect(() => {\r\n  //   const ws = new WebSocket('wss://wbs.mexc.com/ws');\r\n\r\n  //   ws.onopen = () => {\r\n  //     ws.send(JSON.stringify({\r\n  //       method: \"SUBSCRIPTION\",\r\n  //       params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"]\r\n  //     }));\r\n  //   };\r\n\r\n  //   ws.onmessage = (event) => {\r\n  //     const data = JSON.parse(event.data);\r\n  //     if (data?.d?.c) {\r\n  //       const newPrice = parseFloat(data.d.c);\r\n  //       setCurrentPrice(newPrice);\r\n  //       setPriceHistory(prev => [...prev.slice(-99), newPrice]);\r\n  //     }\r\n  //   };\r\n\r\n  //   return () => ws.close();\r\n  // }, []);\r\n\r\n  return {\r\n    balance,\r\n    currentPrice,\r\n    priceHistory,\r\n    loading,\r\n    openOrders,\r\n    orderHistory,\r\n    connectWallet,\r\n    placeOrder,\r\n    setLeverage,\r\n    applyAlgorithm,\r\n    algorithmSettings,\r\n    updateAlgorithmSettings,\r\n    connectionStatus,\r\n    setSelectedAlgorithm: (algo) => setAlgorithmSettings(prev => ({\r\n      ...prev,\r\n      selectedAlgorithm: algo\r\n    }))\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACEC,UAAU,EAACC,gBAAgB,EAC3BC,eAAe,EACfC,UAAU,IAAIC,aAAa,QACtB,iBAAiB;AACxB,SAASC,aAAa,EAAEC,QAAQ,EAACC,wBAAwB,QAAS,+BAA+B;AAEjG,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,EAAE,EAAEC,KAAK,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAClC,MAAM,CAAC4B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7B,QAAQ,CAAC;IACzD,GAAGS,wBAAwB;IAC3BqB,iBAAiB,EAAE;EACrB,CAAC,CAAC;EACF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhC,QAAQ,CAAC,cAAc,CAAC;EAExE,MAAMiC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,SAAS,KAAK;IACjD,IAAI,CAACD,MAAM,IAAI,CAACC,SAAS,EAAE;MACzBH,mBAAmB,CAAC,cAAc,CAAC;MACnC,OAAO,KAAK;IACd;IACA,IAAI;MACFA,mBAAmB,CAAC,YAAY,CAAC;MACjC;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACC;MACD;MACA;MACA;;MAEA;;MAEA;MACA;MACA;;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdJ,mBAAmB,CAAC,OAAO,CAAC;MAC5B,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAM3B,UAAU,GAAG,MAAAA,CAAOgC,IAAI,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAChD,IAAI;MACF,MAAMC,KAAK,GAAG;QACZC,MAAM,EAAE,UAAU;QAClBJ,IAAI;QACJC,MAAM;QACNC,KAAK;QACLf,QAAQ;QACRkB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrBC,MAAM,EAAE;MACV,CAAC;;MAED;MACA,MAAMvC,aAAa,CAACkC,KAAK,CAAC;MAE1BrB,aAAa,CAAE2B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,KAAK,CAAC,CAAC;MACzC,OAAOA,KAAK;IACd,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMY,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,SAAS,GAAGC,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;MAC5CC,CAAC,EAAED,KAAK,CAAC,CAAC,CAAC;MAAc;MACzBE,CAAC,EAAEC,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAAE;MACzBI,CAAC,EAAED,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAAE;MACzBK,CAAC,EAAEF,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAAE;MACzBM,CAAC,EAAEH,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;IAC3B,CAAC,CAAC,CAAC;IACH,MAAMO,QAAQ,GAAGhC,iBAAiB,CAACA,iBAAiB,CAACE,iBAAiB,CAAC;IAEvE,QAAOF,iBAAiB,CAACE,iBAAiB;MACxC,KAAK,eAAe;QAClB,OAAOvB,aAAa,CAAC0C,SAAS,EAAEW,QAAQ,CAAC;MAC3C,KAAK,UAAU;QACb,OAAOpD,QAAQ,CAACyC,SAAS,EAAEW,QAAQ,CAAC;MACtC;QACE,OAAO;UAAEC,MAAM,EAAE,MAAM;UAAEtB,KAAK,EAAEzB;QAAa,CAAC;IAClD;EACF,CAAC;EACD,MAAMgD,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IAC1DnC,oBAAoB,CAACiB,IAAI,KAAK;MAC5B,GAAGA,IAAI;MACP,CAACiB,SAAS,GAAG;QACX,GAAGjB,IAAI,CAACiB,SAAS,CAAC;QAClB,GAAGC;MACL;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EACD/D,SAAS,CAAC,MAAM;IACd,MAAMgE,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAM,CAAC1B,KAAK,EAAE2B,OAAO,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACzCjE,gBAAgB,CAAC,CAAC,EAClBC,eAAe,CAAC,CAAC,CAClB,CAAC;QACFW,eAAe,CAACwB,KAAK,CAAC;QACtBtB,eAAe,CAACiD,OAAO,CAAC;MAC1B,CAAC,CAAC,OAAO9B,KAAK,EAAE;QACdW,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRb,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED0C,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EACN;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,OAAO;IACLrD,OAAO;IACPE,YAAY;IACZE,YAAY;IACZM,OAAO;IACPJ,UAAU;IACVE,YAAY;IACZa,aAAa;IACb5B,UAAU;IACVoB,WAAW;IACXuB,cAAc;IACdpB,iBAAiB;IACjBkC,uBAAuB;IACvB/B,gBAAgB;IAChBsC,oBAAoB,EAAGC,IAAI,IAAKzC,oBAAoB,CAACiB,IAAI,KAAK;MAC5D,GAAGA,IAAI;MACPhB,iBAAiB,EAAEwC;IACrB,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAAC3D,EAAA,CAvKWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}