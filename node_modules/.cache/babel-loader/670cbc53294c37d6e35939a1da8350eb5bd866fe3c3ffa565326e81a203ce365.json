{"ast":null,"code":"// Algoritma ayarları için varsayılan değerler\nexport const defaultAlgorithmSettings = {\n  meanReversion: {\n    lookbackPeriod: 20,\n    stdDevThreshold: 1,\n    riskPercentage: 2,\n    // %2 risk\n    leverage: 10,\n    takeProfit: 5,\n    // %5\n    stopLoss: 2 // %2\n  },\n  breakout: {\n    lookbackPeriod: 50,\n    breakoutThreshold: 0.99,\n    riskPercentage: 1.5,\n    leverage: 5,\n    takeProfit: 8,\n    stopLoss: 1.5\n  }\n};\n\n// Güncellenmiş Mean Reversion Algoritması\nexport const meanReversion = (priceData, settings) => {\n  const {\n    lookbackPeriod,\n    stdDevThreshold,\n    riskPercentage,\n    leverage\n  } = settings;\n  if (priceData.length < lookbackPeriod) return {\n    action: 'hold',\n    price: priceData[priceData.length - 1]\n  };\n  const currentPrice = priceData[priceData.length - 1];\n  const window = priceData.slice(-lookbackPeriod);\n  const mean = window.reduce((sum, price) => sum + price, 0) / window.length;\n  const stdDev = Math.sqrt(window.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / window.length);\n  if (currentPrice < mean - stdDev * stdDevThreshold) {\n    return {\n      action: 'buy',\n      price: currentPrice,\n      amount: calculatePositionSize(riskPercentage, leverage),\n      leverage,\n      takeProfit: currentPrice * (1 + settings.takeProfit / 100),\n      stopLoss: currentPrice * (1 - settings.stopLoss / 100)\n    };\n  } else if (currentPrice > mean + stdDev * stdDevThreshold) {\n    return {\n      action: 'sell',\n      price: currentPrice,\n      amount: calculatePositionSize(riskPercentage, leverage),\n      leverage,\n      takeProfit: currentPrice * (1 - settings.takeProfit / 100),\n      stopLoss: currentPrice * (1 + settings.stopLoss / 100)\n    };\n  }\n  return {\n    action: 'hold',\n    price: currentPrice\n  };\n};\n\n// Güncellenmiş Breakout Algoritması\nexport const breakout = (priceData, settings) => {\n  const {\n    lookbackPeriod,\n    breakoutThreshold,\n    riskPercentage,\n    leverage\n  } = settings;\n  if (priceData.length < lookbackPeriod) return {\n    action: 'hold',\n    price: priceData[priceData.length - 1]\n  };\n  const currentPrice = priceData[priceData.length - 1];\n  const window = priceData.slice(-lookbackPeriod);\n  const high = Math.max(...window);\n  const low = Math.min(...window);\n  if (currentPrice >= high * breakoutThreshold) {\n    return {\n      action: 'buy',\n      price: currentPrice,\n      amount: calculatePositionSize(riskPercentage, leverage),\n      leverage,\n      takeProfit: currentPrice * (1 + settings.takeProfit / 100),\n      stopLoss: currentPrice * (1 - settings.stopLoss / 100)\n    };\n  } else if (currentPrice <= low * (2 - breakoutThreshold)) {\n    return {\n      action: 'sell',\n      price: currentPrice,\n      amount: calculatePositionSize(riskPercentage, leverage),\n      leverage,\n      takeProfit: currentPrice * (1 - settings.takeProfit / 100),\n      stopLoss: currentPrice * (1 + settings.stopLoss / 100)\n    };\n  }\n  return {\n    action: 'hold',\n    price: currentPrice\n  };\n};\n\n// Pozisyon büyüklüğü hesaplama\nconst calculatePositionSize = (riskPercentage, leverage) => {\n  // Bu fonksiyon gerçek uygulamada balance bilgisini kullanacak şekilde güncellenmeli\n  return riskPercentage / 100 * leverage;\n};","map":{"version":3,"names":["defaultAlgorithmSettings","meanReversion","lookbackPeriod","stdDevThreshold","riskPercentage","leverage","takeProfit","stopLoss","breakout","breakoutThreshold","priceData","settings","length","action","price","currentPrice","window","slice","mean","reduce","sum","stdDev","Math","sqrt","pow","amount","calculatePositionSize","high","max","low","min"],"sources":["C:/Users/VESTEL/Documents/GitHub/tradebot/src/services/tradingAlgorithms.jsx"],"sourcesContent":["// Algoritma ayarları için varsayılan değerler\r\nexport const defaultAlgorithmSettings = {\r\n  meanReversion: {\r\n    lookbackPeriod: 20,\r\n    stdDevThreshold: 1,\r\n    riskPercentage: 2, // %2 risk\r\n    leverage: 10,\r\n    takeProfit: 5, // %5\r\n    stopLoss: 2 // %2\r\n  },\r\n  breakout: {\r\n    lookbackPeriod: 50,\r\n    breakoutThreshold: 0.99,\r\n    riskPercentage: 1.5,\r\n    leverage: 5,\r\n    takeProfit: 8,\r\n    stopLoss: 1.5\r\n  }\r\n};\r\n\r\n// Güncellenmiş Mean Reversion Algoritması\r\nexport const meanReversion = (priceData, settings) => {\r\n  const { \r\n    lookbackPeriod, \r\n    stdDevThreshold,\r\n    riskPercentage,\r\n    leverage\r\n  } = settings;\r\n  \r\n  if (priceData.length < lookbackPeriod) return { \r\n    action: 'hold', \r\n    price: priceData[priceData.length - 1] \r\n  };\r\n  \r\n  const currentPrice = priceData[priceData.length - 1];\r\n  const window = priceData.slice(-lookbackPeriod);\r\n  const mean = window.reduce((sum, price) => sum + price, 0) / window.length;\r\n  const stdDev = Math.sqrt(window.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / window.length);\r\n  \r\n  if (currentPrice < mean - (stdDev * stdDevThreshold)) {\r\n    return { \r\n      action: 'buy', \r\n      price: currentPrice,\r\n      amount: calculatePositionSize(riskPercentage, leverage),\r\n      leverage,\r\n      takeProfit: currentPrice * (1 + (settings.takeProfit/100)),\r\n      stopLoss: currentPrice * (1 - (settings.stopLoss/100))\r\n    };\r\n  } else if (currentPrice > mean + (stdDev * stdDevThreshold)) {\r\n    return { \r\n      action: 'sell', \r\n      price: currentPrice,\r\n      amount: calculatePositionSize(riskPercentage, leverage),\r\n      leverage,\r\n      takeProfit: currentPrice * (1 - (settings.takeProfit/100)),\r\n      stopLoss: currentPrice * (1 + (settings.stopLoss/100))\r\n    };\r\n  }\r\n  return { action: 'hold', price: currentPrice };\r\n};\r\n\r\n// Güncellenmiş Breakout Algoritması\r\nexport const breakout = (priceData, settings) => {\r\n  const { \r\n    lookbackPeriod, \r\n    breakoutThreshold,\r\n    riskPercentage,\r\n    leverage\r\n  } = settings;\r\n  \r\n  if (priceData.length < lookbackPeriod) return { \r\n    action: 'hold', \r\n    price: priceData[priceData.length - 1] \r\n  };\r\n  \r\n  const currentPrice = priceData[priceData.length - 1];\r\n  const window = priceData.slice(-lookbackPeriod);\r\n  const high = Math.max(...window);\r\n  const low = Math.min(...window);\r\n  \r\n  if (currentPrice >= high * breakoutThreshold) {\r\n    return { \r\n      action: 'buy', \r\n      price: currentPrice,\r\n      amount: calculatePositionSize(riskPercentage, leverage),\r\n      leverage,\r\n      takeProfit: currentPrice * (1 + (settings.takeProfit/100)),\r\n      stopLoss: currentPrice * (1 - (settings.stopLoss/100))\r\n    };\r\n  } else if (currentPrice <= low * (2 - breakoutThreshold)) {\r\n    return { \r\n      action: 'sell', \r\n      price: currentPrice,\r\n      amount: calculatePositionSize(riskPercentage, leverage),\r\n      leverage,\r\n      takeProfit: currentPrice * (1 - (settings.takeProfit/100)),\r\n      stopLoss: currentPrice * (1 + (settings.stopLoss/100))\r\n    };\r\n  }\r\n  return { action: 'hold', price: currentPrice };\r\n};\r\n\r\n// Pozisyon büyüklüğü hesaplama\r\nconst calculatePositionSize = (riskPercentage, leverage) => {\r\n  // Bu fonksiyon gerçek uygulamada balance bilgisini kullanacak şekilde güncellenmeli\r\n  return (riskPercentage / 100) * leverage;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}