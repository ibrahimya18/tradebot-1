{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getBalance, getPriceHistory, placeOrder as apiPlaceOrder } from \"../services/api\";\nimport { meanReversion, breakout, defaultAlgorithmSettings } from '../services/tradingAlgorithms';\nexport const useMexc = () => {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [currentPrice, setCurrentPrice] = useState(0);\n  const [priceHistory, setPriceHistory] = useState([]);\n  const [openOrders, setOpenOrders] = useState([]);\n  const [orderHistory, setOrderHistory] = useState([]);\n  const [leverage, setLeverage] = useState(10);\n  const [ws, setWs] = useState(null);\n  const [algorithmSettings, setAlgorithmSettings] = useState({\n    ...defaultAlgorithmSettings,\n    selectedAlgorithm: 'meanReversion'\n  });\n  const connectWallet = async (apiKey, secretKey) => {\n    try {\n      const bal = await getBalance(apiKey, secretKey);\n      setBalance(bal);\n\n      // MEXC WebSocket bağlantısı\n      const websocket = new WebSocket(`wss://wbs.mexc.com/ws`);\n      websocket.onopen = () => {\n        a;\n        // Doge/USDT sembolüne subscribe ol\n        websocket.send(JSON.stringify({\n          method: \"SUBSCRIPTION\",\n          params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"]\n        }));\n      };\n      websocket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data && data.d && data.d.c) {\n          setCurrentPrice(parseFloat(data.d.c));\n          setPriceHistory(prev => [...prev.slice(-99), parseFloat(data.d.c)]);\n        }\n      };\n      setWs(websocket);\n\n      // Fiyat geçmişini yükle\n      const history = await getPriceHistory();\n      setPriceHistory(history);\n      return true;\n    } catch (error) {\n      console.error(\"Wallet connection failed:\", error);\n      return false;\n    }\n  };\n  const placeOrder = async (side, amount, price) => {\n    try {\n      const order = {\n        symbol: \"DOGEUSDT\",\n        side,\n        amount,\n        price,\n        leverage,\n        timestamp: Date.now(),\n        status: \"open\"\n      };\n\n      // API'ye gönder\n      await apiPlaceOrder(order);\n      setOpenOrders(prev => [...prev, order]);\n      return order;\n    } catch (error) {\n      console.error(\"Order failed:\", error);\n      return null;\n    }\n  };\n  const applyAlgorithm = algorithmName => {\n    const priceData = [...priceHistory, currentPrice];\n    switch (algorithmName) {\n      case \"meanReversion\":\n        return meanReversion(priceData);\n      case \"breakout\":\n        return breakout(priceData);\n      default:\n        return {\n          action: \"hold\",\n          price: currentPrice\n        };\n    }\n  };\n  useEffect(() => {\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [ws]);\n  return {\n    balance,\n    currentPrice,\n    priceHistory,\n    openOrders,\n    orderHistory,\n    connectWallet,\n    placeOrder,\n    setLeverage,\n    applyAlgorithm\n  };\n};\n_s(useMexc, \"7XmOMfvXpnOSRx271KyXFZkW9hw=\");","map":{"version":3,"names":["useState","useEffect","getBalance","getPriceHistory","placeOrder","apiPlaceOrder","meanReversion","breakout","defaultAlgorithmSettings","useMexc","_s","balance","setBalance","currentPrice","setCurrentPrice","priceHistory","setPriceHistory","openOrders","setOpenOrders","orderHistory","setOrderHistory","leverage","setLeverage","ws","setWs","algorithmSettings","setAlgorithmSettings","selectedAlgorithm","connectWallet","apiKey","secretKey","bal","websocket","WebSocket","onopen","a","send","JSON","stringify","method","params","onmessage","event","data","parse","d","c","parseFloat","prev","slice","history","error","console","side","amount","price","order","symbol","timestamp","Date","now","status","applyAlgorithm","algorithmName","priceData","action","close"],"sources":["C:/Users/VESTEL/Documents/GitHub/tradebot/src/hooks/useMexc.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {\r\n  getBalance,\r\n  getPriceHistory,\r\n  placeOrder as apiPlaceOrder,\r\n} from \"../services/api\";\r\nimport { meanReversion, breakout,defaultAlgorithmSettings  } from '../services/tradingAlgorithms'; \r\n\r\nexport const useMexc = () => {\r\n  const [balance, setBalance] = useState(null);\r\n  const [currentPrice, setCurrentPrice] = useState(0);\r\n  const [priceHistory, setPriceHistory] = useState([]);\r\n  const [openOrders, setOpenOrders] = useState([]);\r\n  const [orderHistory, setOrderHistory] = useState([]);\r\n  const [leverage, setLeverage] = useState(10);\r\n  const [ws, setWs] = useState(null);\r\n  const [algorithmSettings, setAlgorithmSettings] = useState({\r\n    ...defaultAlgorithmSettings,\r\n    selectedAlgorithm: 'meanReversion'\r\n  });\r\n  const connectWallet = async (apiKey, secretKey) => {\r\n    try {\r\n      const bal = await getBalance(apiKey, secretKey);\r\n      setBalance(bal);\r\n\r\n      // MEXC WebSocket bağlantısı\r\n      const websocket = new WebSocket(`wss://wbs.mexc.com/ws`);\r\n\r\n      websocket.onopen = () => {a\r\n        // Doge/USDT sembolüne subscribe ol\r\n        websocket.send(\r\n          JSON.stringify({\r\n            method: \"SUBSCRIPTION\",\r\n            params: [\"spot@public.miniTicker.v3.api@DOGEUSDT\"],\r\n          })\r\n        );\r\n      };\r\n\r\n      websocket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data && data.d && data.d.c) {\r\n          setCurrentPrice(parseFloat(data.d.c));\r\n          setPriceHistory((prev) => [...prev.slice(-99), parseFloat(data.d.c)]);\r\n        }\r\n      };\r\n\r\n      setWs(websocket);\r\n\r\n      // Fiyat geçmişini yükle\r\n      const history = await getPriceHistory();\r\n      setPriceHistory(history);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Wallet connection failed:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const placeOrder = async (side, amount, price) => {\r\n    try {\r\n      const order = {\r\n        symbol: \"DOGEUSDT\",\r\n        side,\r\n        amount,\r\n        price,\r\n        leverage,\r\n        timestamp: Date.now(),\r\n        status: \"open\",\r\n      };\r\n\r\n      // API'ye gönder\r\n      await apiPlaceOrder(order);\r\n\r\n      setOpenOrders((prev) => [...prev, order]);\r\n      return order;\r\n    } catch (error) {\r\n      console.error(\"Order failed:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const applyAlgorithm = (algorithmName) => {\r\n    const priceData = [...priceHistory, currentPrice];\r\n\r\n    switch (algorithmName) {\r\n      case \"meanReversion\":\r\n        return meanReversion(priceData);\r\n      case \"breakout\":\r\n        return breakout(priceData);\r\n      default:\r\n        return { action: \"hold\", price: currentPrice };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (ws) {\r\n        ws.close();\r\n      }\r\n    };\r\n  }, [ws]);\r\n\r\n  return {\r\n    balance,\r\n    currentPrice,\r\n    priceHistory,\r\n    openOrders,\r\n    orderHistory,\r\n    connectWallet,\r\n    placeOrder,\r\n    setLeverage,\r\n    applyAlgorithm,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}